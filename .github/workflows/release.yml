name: Draft Release

on:
  push:
    branches:
      - "master"

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine the release version
        id: derive_release_version
        run: |
          RELEASE_VERSION=$(cat package.json | jq -r '.version')
          echo "::set-output name=version::${RELEASE_VERSION}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.derive_release_version.outputs.version }}
          release_name: Version ${{ steps.derive_release_version.outputs.version }}
          draft: true
          prerelease: false

      - name: Store Upload URL
        run: echo "${{ steps.create_release.outputs.upload_url }}" > create_release.txt

      - name: Upload Upload URL
        uses: actions/upload-artifact@v1
        with:
          name: create_release
          path: create_release.txt

  publish-linux:
    needs: ["create-release"]

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Update System
        run: sudo apt-get update

      - name: Ledger
        run: sudo apt-get install libudev-dev libusb-1.0-0-dev

      - name: Install
        run: yarn global add node-gyp && yarn install --frozen-lockfile

      - name: Re-build bcrypto
        run: cd node_modules/bcrypto && npm install && cd ../../

      - name: Build
        run: yarn build:linux

      - name: Download Release Upload URL
        uses: actions/download-artifact@v1
        with:
          name: create_release

      - name: Store Release Upload URL
        id: create_release
        run: |
          RELEASE_UPLOAD_URL=$(cat create_release/create_release.txt)
          echo "::set-output name=upload_url::${RELEASE_UPLOAD_URL}"

      - name: Upload linux-amd64.deb
        id: upload-release-asset-deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/target/ark-desktop-wallet-linux-amd64-2.8.1.deb
          asset_name: linux-amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload linux-x86_64.AppImage
        id: upload-release-asset-appimage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/target/ark-desktop-wallet-linux-x86_64-2.8.1.AppImage
          asset_name: linux-x86_64.AppImage
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload linux-x64.tar.gz
        id: upload-release-asset-tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/target/ark-desktop-wallet-linux-x64-2.8.1.tar.gz
          asset_name: linux-x64.tar.gz
          asset_content_type: application/vnd.debian.binary-package

  publish-macos:
    needs: ["create-release"]

    runs-on: macos-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install
        run: yarn global add node-gyp && yarn install --frozen-lockfile

      - name: Build
        run: yarn build:mac

      - name: Download Release Upload URL
        uses: actions/download-artifact@v1
        with:
          name: create_release

      - name: Store Release Upload URL
        id: create_release
        run: |
          RELEASE_UPLOAD_URL=$(cat create_release/create_release.txt)
          echo "::set-output name=upload_url::${RELEASE_UPLOAD_URL}"

      - name: Upload mac.dmg
        id: upload-release-asset-dmg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/target/ark-desktop-wallet-mac-2.8.1.dmg
          asset_name: mac.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload mac.zip
        id: upload-release-asset-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/target/ark-desktop-wallet-mac-2.8.1.zip
          asset_name: mac.zip
          asset_content_type: application/zip

  publish-windows:
    needs: ["create-release"]

    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install
        run: yarn global add node-gyp && yarn install --frozen-lockfile
        shell: cmd

      - name: Build
        run: yarn build:win
        shell: cmd

      - name: Download Release Upload URL
        uses: actions/download-artifact@v1
        with:
          name: create_release

      - name: Store Release Upload URL
        id: create_release
        run: |
          $RELEASE_UPLOAD_URL = Get-Content create_release/create_release.txt -Raw
          echo "::set-output name=upload_url::$RELEASE_UPLOAD_URL"
        shell: pwsh

      - name: Upload win.exe
        id: upload-release-asset-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/target/ark-desktop-wallet-win-2.8.1.exe
          asset_name: win.exe
          asset_content_type: application/vnd.microsoft.portable-executable
